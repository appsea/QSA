"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var detailed_result_view_model_1 = require("./detailed-result-view-model");
var application_1 = require("application");
var platform_1 = require("platform");
var navigationModule = require("../navigation");
var frame_1 = require("ui/frame");
var page;
var vm;
var list;
function onPageLoaded(args) {
    if (!platform_1.isAndroid) {
        return;
    }
    var page = args.object;
    page.on(application_1.AndroidApplication.activityBackPressedEvent, onActivityBackPressedEvent, this);
}
exports.onPageLoaded = onPageLoaded;
function onActivityBackPressedEvent(args) {
    navigationModule.goBack();
    args.cancel = true;
}
exports.onActivityBackPressedEvent = onActivityBackPressedEvent;
function pageNavigatingTo(args) {
    page = args.object;
    list = page.getViewById("listView");
    var state = page.navigationContext;
    vm = new detailed_result_view_model_1.DetailedResultViewModel(state);
    page.bindingContext = vm;
}
exports.pageNavigatingTo = pageNavigatingTo;
function onDrawerButtonTap(args) {
    var sideDrawer = frame_1.topmost().getViewById("sideDrawer");
    sideDrawer.showDrawer();
}
exports.onDrawerButtonTap = onDrawerButtonTap;
function all() {
    vm.all();
    list.scrollToIndex(0);
}
exports.all = all;
function correct() {
    vm.correct();
    list.scrollToIndex(0);
}
exports.correct = correct;
function incorrect() {
    vm.incorrect();
    list.scrollToIndex(0);
}
exports.incorrect = incorrect;
function skipped() {
    vm.skipped();
    list.scrollToIndex(0);
}
exports.skipped = skipped;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV0YWlsZWQtcmVzdWx0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGV0YWlsZWQtcmVzdWx0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBR0EsMkVBQXFFO0FBQ3JFLDJDQUFvRjtBQUNwRixxQ0FBbUM7QUFDbkMsZ0RBQWtEO0FBRWxELGtDQUFpQztBQUdqQyxJQUFJLElBQVUsQ0FBQztBQUNmLElBQUksRUFBMkIsQ0FBQztBQUNoQyxJQUFJLElBQXVCLENBQUM7QUFFNUIsc0JBQTZCLElBQWU7SUFDeEMsRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBUyxDQUFDLENBQUMsQ0FBQztRQUNiLE1BQU0sQ0FBQztJQUNYLENBQUM7SUFDRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLElBQUksQ0FBQyxFQUFFLENBQUMsZ0NBQWtCLENBQUMsd0JBQXdCLEVBQUUsMEJBQTBCLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0YsQ0FBQztBQU5ELG9DQU1DO0FBRUQsb0NBQTJDLElBQXlDO0lBQ2hGLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQzFCLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDO0FBQ3ZCLENBQUM7QUFIRCxnRUFHQztBQUVELDBCQUFpQyxJQUFtQjtJQUNoRCxJQUFJLEdBQVMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN6QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxJQUFJLEtBQUssR0FBa0IsSUFBSSxDQUFDLGlCQUFpQixDQUFDO0lBQ2xELEVBQUUsR0FBRyxJQUFJLG9EQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3hDLElBQUksQ0FBQyxjQUFjLEdBQUcsRUFBRSxDQUFDO0FBQzdCLENBQUM7QUFORCw0Q0FNQztBQUVELDJCQUFrQyxJQUFlO0lBQzdDLElBQU0sVUFBVSxHQUFrQixlQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDdEUsVUFBVSxDQUFDLFVBQVUsRUFBRSxDQUFDO0FBQzVCLENBQUM7QUFIRCw4Q0FHQztBQUVEO0lBQ0ksRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ1QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBSEQsa0JBR0M7QUFFRDtJQUNJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNiLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDMUIsQ0FBQztBQUhELDBCQUdDO0FBRUQ7SUFDSSxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7SUFDZixJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzFCLENBQUM7QUFIRCw4QkFHQztBQUVEO0lBQ0ksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ2IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxQixDQUFDO0FBSEQsMEJBR0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50RGF0YSwgT2JzZXJ2YWJsZX0gZnJvbSBcImRhdGEvb2JzZXJ2YWJsZVwiO1xyXG5pbXBvcnQge1N0YXRlfSBmcm9tIFwiLi4vcXVlc3Rpb25zLm1vZGVsXCI7XHJcbmltcG9ydCB7TmF2aWdhdGVkRGF0YSwgUGFnZX0gZnJvbSAndWkvcGFnZSc7XHJcbmltcG9ydCB7RGV0YWlsZWRSZXN1bHRWaWV3TW9kZWx9IGZyb20gXCIuL2RldGFpbGVkLXJlc3VsdC12aWV3LW1vZGVsXCI7XHJcbmltcG9ydCB7QW5kcm9pZEFjdGl2aXR5QmFja1ByZXNzZWRFdmVudERhdGEsIEFuZHJvaWRBcHBsaWNhdGlvbn0gZnJvbSBcImFwcGxpY2F0aW9uXCI7XHJcbmltcG9ydCB7aXNBbmRyb2lkfSBmcm9tIFwicGxhdGZvcm1cIjtcclxuaW1wb3J0ICogYXMgbmF2aWdhdGlvbk1vZHVsZSBmcm9tICcuLi9uYXZpZ2F0aW9uJztcclxuaW1wb3J0IHtSYWRTaWRlRHJhd2VyfSBmcm9tIFwibmF0aXZlc2NyaXB0LXVpLXNpZGVkcmF3ZXJcIjtcclxuaW1wb3J0IHt0b3Btb3N0fSBmcm9tIFwidWkvZnJhbWVcIjtcclxuaW1wb3J0ICogYXMgTGlzdFZpZXcgZnJvbSBcInVpL2xpc3Qtdmlld1wiO1xyXG5cclxudmFyIHBhZ2U6IFBhZ2U7XHJcbmxldCB2bTogRGV0YWlsZWRSZXN1bHRWaWV3TW9kZWw7XHJcbmxldCBsaXN0OiBMaXN0Vmlldy5MaXN0VmlldztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvblBhZ2VMb2FkZWQoYXJnczogRXZlbnREYXRhKTogdm9pZCB7XHJcbiAgICBpZiAoIWlzQW5kcm9pZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGxldCBwYWdlID0gYXJncy5vYmplY3Q7XHJcbiAgICBwYWdlLm9uKEFuZHJvaWRBcHBsaWNhdGlvbi5hY3Rpdml0eUJhY2tQcmVzc2VkRXZlbnQsIG9uQWN0aXZpdHlCYWNrUHJlc3NlZEV2ZW50LCB0aGlzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uQWN0aXZpdHlCYWNrUHJlc3NlZEV2ZW50KGFyZ3M6IEFuZHJvaWRBY3Rpdml0eUJhY2tQcmVzc2VkRXZlbnREYXRhKSB7XHJcbiAgICBuYXZpZ2F0aW9uTW9kdWxlLmdvQmFjaygpO1xyXG4gICAgYXJncy5jYW5jZWwgPSB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcGFnZU5hdmlnYXRpbmdUbyhhcmdzOiBOYXZpZ2F0ZWREYXRhKTogdm9pZCB7XHJcbiAgICBwYWdlID0gPFBhZ2U+YXJncy5vYmplY3Q7XHJcbiAgICBsaXN0ID0gcGFnZS5nZXRWaWV3QnlJZChcImxpc3RWaWV3XCIpO1xyXG4gICAgbGV0IHN0YXRlOiBTdGF0ZSA9IDxTdGF0ZT4gcGFnZS5uYXZpZ2F0aW9uQ29udGV4dDtcclxuICAgIHZtID0gbmV3IERldGFpbGVkUmVzdWx0Vmlld01vZGVsKHN0YXRlKTtcclxuICAgIHBhZ2UuYmluZGluZ0NvbnRleHQgPSB2bTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRHJhd2VyQnV0dG9uVGFwKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgY29uc3Qgc2lkZURyYXdlciA9IDxSYWRTaWRlRHJhd2VyPnRvcG1vc3QoKS5nZXRWaWV3QnlJZChcInNpZGVEcmF3ZXJcIik7XHJcbiAgICBzaWRlRHJhd2VyLnNob3dEcmF3ZXIoKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFsbCgpOiB2b2lkIHtcclxuICAgIHZtLmFsbCgpO1xyXG4gICAgbGlzdC5zY3JvbGxUb0luZGV4KDApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29ycmVjdCgpOiB2b2lkIHtcclxuICAgIHZtLmNvcnJlY3QoKTtcclxuICAgIGxpc3Quc2Nyb2xsVG9JbmRleCgwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluY29ycmVjdCgpOiB2b2lkIHtcclxuICAgIHZtLmluY29ycmVjdCgpO1xyXG4gICAgbGlzdC5zY3JvbGxUb0luZGV4KDApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc2tpcHBlZCgpOiB2b2lkIHtcclxuICAgIHZtLnNraXBwZWQoKTtcclxuICAgIGxpc3Quc2Nyb2xsVG9JbmRleCgwKTtcclxufSJdfQ==